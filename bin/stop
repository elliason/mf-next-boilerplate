#!/usr/bin/env bash

scriptPath="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
rootPath="$(dirname "${scriptPath}")"

# Parse long options using getopt
OPTIONS=$(getopt -o f:w:a:d:s:u:c: --long frontend:,web:,admin:,docs:,storybook:,ui:,cms: -- "$@")

# Set default values
FRONTEND=""
WEB=""
ADMIN=""
DOCS=""
STORYBOOK=""
UI=""
CMS=""

COMPOSE_FILE=""
ARGS=""

# Extract options and their values
eval set -- "$OPTIONS"
while true; do
  case "$1" in
    -f | --frontend ) FRONTEND="$2"; shift 2 ;;
    -w | --web ) WEB="$2"; shift 2 ;;
    -a | --admin ) ADMIN="$2"; shift 2 ;;
    -d | --docs ) DOCS="$2"; shift 2 ;;
    -s | --storybook ) STORYBOOK="$2"; shift 2 ;;
    -u | --ui ) UI="$2"; shift 2 ;;
    -c | --cms ) CMS="$2"; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# Print the options and their values
echo "--- Stop options ---"
echo "FRONTEND: $FRONTEND"
echo "WEB: $WEB"
echo "ADMIN: $ADMIN"
echo "DOCS: $DOCS"
echo "STORYBOOK: $STORYBOOK"
echo "UI: $UI"
echo "CMS: $CMS"

if [[ -z "$FRONTEND" && -z "$WEB" && -z "$ADMIN" && -z "$DOCS" && -z "$STORYBOOK" && -z "$UI" && -z "$CMS" ]]; then
  echo "Error: No options provided"
  exit 1
fi

# Check if .env file exists
if [[ ! -f "$rootPath/.env" ]]; then
  echo "Error: File .env not found"
  exit 1
fi

if [[ -z "$RUNENV" ]]; then
    RUNENV=$(grep RUNENV "$rootPath/.env" | cut -d '=' -f2)
fi

if [[ -z "$COMPOSE_FILE_DIRECTORY" ]]; then
  COMPOSE_FILE_DIRECTORY=$(grep COMPOSE_FILE_DIRECTORY "$rootPath/.env" | cut -d '=' -f2)
fi

# check if $RUNENV exists and is not empty
if [[ -z "$RUNENV" ]]; then
  echo "Error: RUNENV not found in .env file"
  exit 1
fi

# check if $COMPOSE_FILE_DIRECTORY exists and is not empty
if [[ -z "$COMPOSE_FILE_DIRECTORY" ]]; then
  echo "Error: COMPOSE_FILE_DIRECTORY not found in .env file"
  exit 1
fi

# Check if frontend option is provided
if [[ ! -z "$FRONTEND" ]]; then
  echo "Stoping frontend stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.frontend.$RUNENV.yaml"
fi

# Check if web option is provided
if [[ ! -z "$WEB" ]]; then
  echo "Stoping web stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.web.$RUNENV.yaml"
fi

# Check if admin option is provided
if [[ ! -z "$ADMIN" ]]; then
  echo "Stoping admin stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.admin.$RUNENV.yaml"
fi

# Check if docs option is provided
if [[ ! -z "$DOCS" ]]; then
  echo "Stoping docs stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.docs.$RUNENV.yaml"
fi

# Check if storybook option is provided
if [[ ! -z "$STORYBOOK" ]]; then
  echo "Stoping storybook stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.storybook.$RUNENV.yaml"
fi

# Check if ui option is provided
if [[ ! -z "$UI" ]]; then
  echo "Stoping ui stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.ui.$RUNENV.yaml"
fi

# Check if cms option is provided
if [[ ! -z "$CMS" ]]; then
  echo "Stoping cms stack"
  COMPOSE_FILE="$rootPath/$COMPOSE_FILE_DIRECTORY/docker-compose.cms.$RUNENV.yaml"
fi

# Check if compose file exists
if [[ ! -f "$COMPOSE_FILE" ]]; then
  echo "Error: File $COMPOSE_FILE not found"
  exit 1
fi

if [[ -z "$DOCKER_HOST_MACHINE_IP" ]]; then
    export DOCKER_HOST_MACHINE_IP="$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' webapp)"
fi

export MY_UID="$(id -u)"
export MY_GID="$(id -g)"

ARGS="--project-directory $rootPath -f $COMPOSE_FILE"

if [[ ! -z "$FRONTEND" ]]; then
    docker-compose ${ARGS} down --remove-orphans
    exit 0
fi

docker-compose ${ARGS} down
